.media-thumb-gen(@width){
	.media-thumb{
		width: @width - 12px;
		a{
			width: @width - 12px;
			height: @width * .5625;
			overflow: hidden;
			p{
				width: @width - 32px;
				.title{
					width: @width - 48px;
					}
			}
		}
	}
}

		
	#gridSystem {
	  // Setup the mixins to be used
	  .columns(@width) {
	    width: @width;
	  } 
	  .offset(@gridColumnWidth, @gridGutterWidth, @columns) {
	    margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1)) + (@gridGutterWidth * 2);
	  }
	  .gridColumn(@gridGutterWidth) {
	    float: left;
	    margin-left: @gridGutterWidth;
	  }
	  // Take these values and mixins, and make 'em do their thang
	  .generate(@gridColumns, @gridColumnWidth, @gridGutterWidth) {
	    // Row surrounds the columns
	    .row {
	      margin-left: @gridGutterWidth * -1;
	      .clearfix();
	    }
	    // Find all .span# classes within .row and give them the necessary properties for grid columns (supported by all browsers back to IE7, thanks @dhg)
	    [class*="span"] {
	      #gridSystem > .gridColumn(@gridGutterWidth);
	    }
	    // Default columns
	    .span12,
	    .container { @width: (@gridColumnWidth * 12) + (@gridGutterWidth * (12 - 1)); #gridSystem > .columns(@width); }
	    .span11     { @width: (@gridColumnWidth * 11) + (@gridGutterWidth * (11 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span10     { @width: (@gridColumnWidth * 10) + (@gridGutterWidth * (10 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span9     { @width: (@gridColumnWidth * 9) + (@gridGutterWidth * (9 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span8     { @width: (@gridColumnWidth * 8) + (@gridGutterWidth * (8 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span7     { @width: (@gridColumnWidth * 7) + (@gridGutterWidth * (7 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span6     { @width: (@gridColumnWidth * 6) + (@gridGutterWidth * (6 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span5     { @width: (@gridColumnWidth * 5) + (@gridGutterWidth * (5 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span4     { @width: (@gridColumnWidth * 4) + (@gridGutterWidth * (4 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span3     { @width: (@gridColumnWidth * 3) + (@gridGutterWidth * (3 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span2     { @width: (@gridColumnWidth * 2) + (@gridGutterWidth * (2 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    .span1     { @width: (@gridColumnWidth * 1) + (@gridGutterWidth * (1 - 1)); #gridSystem > .columns(@width); .media-thumb-gen(@width); }
	    // Offset column options
	    .offset1   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 1); }
	    .offset2   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 2); }
	    .offset3   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 3); }
	    .offset4   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 4); }
	    .offset5   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 5); }
	    .offset6   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 6); }
	    .offset7   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 7); }
	    .offset8   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 8); }
	    .offset9   { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 9); }
	    .offset10  { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 10); }
	    .offset11  { #gridSystem > .offset(@gridColumnWidth, @gridGutterWidth, 11); }
	  }
	}
